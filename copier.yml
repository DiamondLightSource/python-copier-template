# Project Details
package_name:
    type: str
    help: |
        Name of the python import package.
        Must be a valid python identifier, i.e. my_package
    validator: >-
        {% if not (package_name | regex_search('^[a-zA-Z][a-zA-Z_0-9]+$')) %}
        {{package_name}} is not a valid python package name
        {% endif %}

description:
    type: str
    help: A short description of your project
    placeholder: One line description of your module

git_platform:
    type: str
    help: Git platform hosting the repository
    choices:
        - github.com

github_org:
    type: str
    help: |
        GitHub organisation that will contain this repo.
        Set to your GitHub username to make a personal repo, or DiamondLightSource
        if you have permissions to make it in the DiamondLightSource organisation.
    when: "{{ git_platform == 'github.com' }}"
    default: DiamondLightSource

repo_name:
    type: str
    help: |
        Name of the repository.
        Generally the package name with underscores replaced by dashes.
    default: "{{ package_name | replace('_', '-') }}"
    validator: >-
        {% if not (repo_name | regex_search('^[a-zA-Z][a-zA-Z_\\.\\-0-9]+$')) %}
        {{ repo_name }} is not a valid repo name
        {% endif %}

distribution_name:
    type: str
    help: |
        Name of the python distribution package that will be created.
        This is what people will `pip install`.
        Generally the same as the repo name unless there is a name clash on PyPI.
    default: "{{ repo_name }}"

author_name:
    type: str
    help: Your full name
    placeholder: FirstName LastName

author_email:
    type: str
    help: Your email address
    placeholder: email@diamond.ac.uk

# Catalog info
component_owner:
    type: str
    when: "{{ github_org == 'DiamondLightSource' }}"
    help: |
        The unique name of the person or group who owns this component in
        the Developer Portal Software Catalogue.
        This will normally be group:default/<your_group>. For a full list of groups visit
        https://dev-portal.diamond.ac.uk/catalog?filters%5Bkind%5D=group&filters%5Buser%5D=all
        and hover over each group link to see its group ID, e.g.
        https://dev-portal.diamond.ac.uk/catalog/default/group/accelerator-controls
        would go here as group:default/accelerator-controls.

component_type:
    type: str
    when: "{{ github_org == 'DiamondLightSource' }}"
    help: |
        Type of the component in the Developer Portal Software Catalogue.
        Most likely service, library or application (without quotes).
    choices:
        - library
        - service
        - user-interface
        - website
    default: library

component_lifecycle:
    type: str
    when: "{{ github_org == 'DiamondLightSource' }}"
    help: |
        Project's current lifecycle stage, to be displayed in the Developer
        Portal Software Catalogue.
    choices:
        - experimental
        - production
        - deprecated
    default: experimental

# Template Options
docker:
    type: bool
    help: |
        Would you like to publish your project in a Docker container?
        You should select this if you are making a service.

docker_debug:
    type: bool
    when: "{{ docker }}"
    help: |
        Would you like to publish a debug image of your service?
        This will increase the number of published images, but may
        be useful if debugging the service inside of the cluster
        infrastructure is required.

docs_type:
    type: str
    help: |
        How would you like to document your project?
        You can start with just a README and change your answer to add a sphinx project later.
    choices:
        - README
        - sphinx

type_checker:
    type: str
    help: |
        What type checker would you like to use?
        Pyright is recommended for new projects, but it is stricter,
        so you might need to select mypy for existing projects.
    choices:
        - pyright
        - mypy

strict_typing:
    type: bool
    when: >-
        {{ type_checker == 'pyright' }}
    default: true
    help: |
        Would you like to run pyright in strict mode?
        The recommended approach is to start with strict mode and disable it if it 
        becomes too costly to maintain. 
        See https://diamondlightsource.github.io/python-copier-template/main/how-to/strict-mode.html 
        for more information.

pypi:
    type: bool
    help: Would you like the wheel and source distribution to be automatically uploaded to PyPI when a release is made?

# Internal variables
repo_url:
    type: str
    default: "https://github.com/{{github_org}}/{{repo_name}}"
    when: false

docs_url:
    type: str
    default: "https://{{github_org | lower}}.github.io/{{repo_name}}"
    when: false

sphinx:
    type: bool
    default: "{{ docs_type == 'sphinx' }}"
    when: false

_subdirectory: "template"

_migrations:
    - version: 2.0.0
      before:
          - echo This update will require you to login to pypi.org and make changes before you can make a new release to PyPI. If you do not have time to do this now, press CTRL+C to abort this update.
      after:
          - echo Visit https://diamondlightsource.github.io/python-copier-template/main/how-to/pypi.html to find out how to set up PyPI trusted publishing
