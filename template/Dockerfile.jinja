# The devcontainer should use the developer target and run as root with podman
# or docker with user namespaces.
FROM ghcr.io/diamondlightsource/ubuntu-devcontainer:noble as developer

# Add any system dependencies for the developer/build environment here
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     graphviz

# The build stage installs the context into the venv
FROM developer AS build
COPY . /context
WORKDIR /context

# Enable bytecode compilation and copy from the cache instead of linking 
# since it's a mounted volume
ENV UV_COMPILE_BYTECODE=1
ENV UV_LINK_MODE=copy

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project --no-dev

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
COPY . /context
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-dev
# Requires buildkit 0.17.0
COPY . /workspaces/{{ repo_name }}
WORKDIR /workspaces/{{ repo_name }}
RUN chmod o+wrX . && touch dev-requirements.txt && pip install -c dev-requirements.txt .

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project --no-dev

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
COPY . /assets/
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-dev

# The runtime stage installs runtime deps then copies in built assets
# This time we remove the apt lists to save disk space
FROM ubuntu:noble as runtime

# Add apt-get system dependecies for runtime here if needed

# We need to keep the venv at the same absolute path as in the build stage
COPY --from=build /context/venv/ /context/venv/
ENV PATH=/context/venv/bin:$PATH

# Change this entrypoint if it is not the same as the repo
ENTRYPOINT ["{{ repo_name }}"]
CMD ["--version"]{% endif %}
